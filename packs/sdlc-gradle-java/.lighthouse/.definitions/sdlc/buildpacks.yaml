# Source: tektonpipelines/templates/tasks/buildpaks-task.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildpacks
  annotations:
    tekton.dev/categories: Image Build
    tekton.dev/pipelines.minVersion: "0.20.0"
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Buildpacks"
spec:
  description: >-
    The Buildpacks task builds source into a container image and pushes it to a registry, using Cloud Native Buildpacks.
  workspaces:
    - name: source
      description: Directory where application source is located.
  params:
    - name: BP_BUILDER_IMAGE
      description: The image on which builds will run (must include lifecycle and compatible buildpacks).
    - name: ENV_VARS
      type: string
      description: Environment variables to set during _build-time_.
      default: ""
    - name: PROCESS_TYPE
      description: The default process type to set on the image.
      default: "web"
    - name: RUN_IMAGE
      description: Reference to a run image to use.
      default: ""
    - name: CACHE_IMAGE
      description: The name of the persistent app cache image (if no cache workspace is provided).
      default: ""
    - name: SKIP_RESTORE
      description: Do not write layer metadata or restore cached layers.
      default: "false"
    - name: USER_ID
      description: The user ID of the builder image user.
      default: "1000"
    - name: GROUP_ID
      description: The group ID of the builder image user.
      default: "1000"
    - name: PLATFORM_DIR
      description: The name of the platform directory.
      default: empty-dir
    - name: BP_COPY_FOLDER
      description: paketo cleaning directory after build, so we need copy sources and run build there
      default: "source_copy"
    - name: BP_CACHE
      description: The name of the persistent app cache volume.
      default: cache-dir
  stepTemplate:
    env:
      - name: CNB_PLATFORM_API
        value: "0.4"
      - name: HOME
        value: /tekton/home
  steps:
    - name: next-image
      image: docker.io/library/bash:5.1.4@sha256:b208215a4655538be652b2769d82e576bc4d0a2bb132144c060efc5be8c3f5d6
      workingDir: $(workspaces.source.path)
      script: |
        source $(workspaces.source.path)/.jx/variables.sh
        export OUTPUT_IMAGE=$DOCKER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME:$VERSION
        echo -n "$OUTPUT_IMAGE" > .image_name
        cat .image_name
    - name: bp-prepare
      image: docker.io/library/bash:5.1.4@sha256:b208215a4655538be652b2769d82e576bc4d0a2bb132144c060efc5be8c3f5d6
      args:
        - "--env-vars"
        - "$(params.ENV_VARS[*])"
      script: |
        #!/usr/bin/env bash
        set -e

        cp -aR  "$(workspaces.source.path)/." "/$(params.BP_COPY_FOLDER)"

        echo "> Setting permissions on '/cache'..."
        chown -R "$(params.USER_ID):$(params.GROUP_ID)" "/cache"

        for path in "/tekton/home" "/layers" "/$(params.BP_COPY_FOLDER)"; do
          echo "> Setting permissions on '$path'..."
          chown -R "$(params.USER_ID):$(params.GROUP_ID)" "$path"
        done
        echo "> Parsing additional configuration..."
        parsing_flag=""
        envs=()
        for arg in "$@"; do
            if [[ "$arg" == "--env-vars" ]]; then
                echo "-> Parsing env variables..."
                parsing_flag="env-vars"
            elif [[ "$parsing_flag" == "env-vars" ]]; then
                envs+=("$arg")
            fi
        done
        echo "> Processing any environment variables..."
        ENV_DIR="/platform/env"
        echo "--> Creating 'env' directory: $ENV_DIR"
        mkdir -p "$ENV_DIR"
        for env in "${envs[@]}"; do
            IFS='=' read -r key value string <<< "$env"
            if [[ "$key" != "" && "$value" != "" ]]; then
                path="${ENV_DIR}/${key}"
                echo "--> Writing ${path}..."
                echo -n "$value" > "$path"
            fi
        done
        
        echo -n "build" > "${ENV_DIR}/BP_NODE_RUN_SCRIPTS"
      volumeMounts:
        - name: layers-dir
          mountPath: /layers
        - name: $(params.BP_CACHE)
          mountPath: /cache
        - name: source-copy
          mountPath: /$(params.BP_COPY_FOLDER)
        - name: $(params.PLATFORM_DIR)
          mountPath: /platform
      securityContext:
        privileged: true
    - name: bp-create
      image: $(params.BP_BUILDER_IMAGE)
      imagePullPolicy: Always
      script: |
        DOCKER_CUSTOM_CONF="$(workspaces.source.path)/.docker-config.json"

        if [ -f "$DOCKER_CUSTOM_CONF" ]; then
          mkdir -p /tekton/home/.docker/
          cp $(workspaces.source.path)/.docker-config.json /tekton/home/.docker/config.json
        fi

        IMAGE="$(cat $(workspaces.source.path)/.image_name)"

        /cnb/lifecycle/creator \
        -app=/$(params.BP_COPY_FOLDER) \
        -cache-dir=/cache \
        -cache-image=$(params.CACHE_IMAGE) \
        -uid=$(params.USER_ID) \
        -gid=$(params.GROUP_ID) \
        -layers=/layers \
        -platform=/platform \
        -report=/layers/report.toml \
        -process-type=$(params.PROCESS_TYPE) \
        -skip-restore=$(params.SKIP_RESTORE) \
        -previous-image=$IMAGE \
        -run-image=$(params.RUN_IMAGE) $IMAGE
      env:
        - name: ARTIFACT_REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: nexus
              key: password
        - name: ARTIFACT_REGISTRY_USER
          value: "admin"
        - name: ARTIFACT_REGISTRY_URL
          value: "http://nexus/repository/maven-group/"
      volumeMounts:
        - name: layers-dir
          mountPath: /layers
        - name: $(params.BP_CACHE)
          mountPath: /cache
        - name: $(params.PLATFORM_DIR)
          mountPath: /platform
        - name: source-copy
          mountPath: /$(params.BP_COPY_FOLDER)
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
  volumes:
    - name: empty-dir
      emptyDir: {}
    - name: cache-dir
      persistentVolumeClaim:
        claimName: buildpacks-cache
    - name: source-copy
      emptyDir: {}
    - name: layers-dir
      emptyDir: {}
