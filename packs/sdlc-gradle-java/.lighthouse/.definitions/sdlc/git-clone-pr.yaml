apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone-pr
spec:
  params:
    - name: JX_BOOT
      description: JX boot image
  stepTemplate:
    env:
    - name: HOME
      value: /tekton/home
    envFrom:
    - secretRef:
        name: jx-boot-job-env-vars
        optional: true
    name: ""
    resources: {}
  steps:
  - envFrom:
    - secretRef:
        name: jx-boot-job-env-vars
        optional: true
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.27.0
    name: git-clone
    script: |
      #!/bin/sh
      set -eu -o pipefail

      CHECKOUT_DIR="$(workspaces.source.path)"

      cleandir() {
        # Delete any existing contents of the repo directory if it exists.
        #
        # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
        # or the root of a mounted volume.
        if [[ -d "$CHECKOUT_DIR" ]] ; then
          # Delete non-hidden files and directories
          rm -rf "$CHECKOUT_DIR"/*
          # Delete files and directories starting with . but excluding ..
          rm -rf "$CHECKOUT_DIR"/.[!.]*
          # Delete files and directories starting with .. plus any other character
          rm -rf "$CHECKOUT_DIR"/..?*
        fi
      }

      cleandir

      echo "git cloning url: $REPO_URL version $PULL_PULL_REF:$(echo $JOB_NAME | tr '[:lower:]' '[:upper:]')-$PULL_NUMBER@$PULL_PULL_SHA to dir: $CHECKOUT_DIR"
      git config --global --add user.name ${GIT_AUTHOR_NAME:-jenkins-x-bot}
      git config --global --add user.email ${GIT_AUTHOR_EMAIL:-jenkins-x@googlegroups.com}
      git config --global credential.helper store
      git clone $REPO_URL $CHECKOUT_DIR
      cd $CHECKOUT_DIR
      git fetch origin $PULL_PULL_REF:$(echo $JOB_NAME | tr '[:lower:]' '[:upper:]')-$PULL_NUMBER
      git checkout $(echo $JOB_NAME | tr '[:lower:]' '[:upper:]')-$PULL_NUMBER
      git reset --hard $PULL_PULL_SHA
      echo "checked out revision: $PULL_PULL_REF:$(echo $JOB_NAME | tr '[:lower:]' '[:upper:]')-$PULL_NUMBER@$PULL_PULL_SHA to dir: $CHECKOUT_DIR"

      ls -la $CHECKOUT_DIR
  - envFrom:
    - secretRef:
        name: jx-boot-job-env-vars
        optional: true
    image: $(params.JX_BOOT)
    name: git-merge
    resources: {}
    script: |
      #!/usr/bin/env sh
      jx gitops git merge
    workingDir: $(workspaces.source.path)
  workspaces:
  - description: The git repo will be cloned onto the volume backing this workspace
    name: source
