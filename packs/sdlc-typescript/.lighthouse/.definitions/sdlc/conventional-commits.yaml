apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: conventional-commits
  annotations:
    tekton.dev/pipelines.minVersion: "0.20.0"
    tekton.dev/displayName: "conventional-commits"
spec:
  description: >-
    The Conventional Commits specification is a lightweight convention on top of commit messages.
    It provides an easy set of rules for creating an explicit commit history;
    which makes it easier to write automated tools on top of.
    This convention dovetails with SemVer, by describing the features, fixes, and breaking changes made in commit messages.

    The commit message should be structured as follows:
      <type>[optional scope]: <description>

      [optional body]

      [optional footer(s)]
  workspaces:
    - name: source
      description: sources dir
  params:
    - name: CC_FAIL
      type: string
      description: Should Pipeline be failed in case of invalid commit message
      default: "true"
    - name: CC_LINTER_IMAGE
      type: string
      description: image who scanning commits
      default: "aevea/commitsar:0.16.0"
    - name: JX_BOOT
      type: string
  results:
    - name: passed
      description: "conventional commits passed: true/false"
  steps:
    - name: cc-check
      image: $(params.CC_LINTER_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: RESULTS_REPORT_PATH
          value: .conv-commits-report.json
      script: |
        commitsar -v

        if commitsar > "$RESULTS_REPORT_PATH"; then
          echo -n "true" > $(results.passed.path)
        else
          echo -n "false" > $(results.passed.path)
        fi
    - name: cc-prepare-report
      image: $(params.CC_LINTER_IMAGE)
      workingDir: $(workspaces.source.path)
      script: |
        echo "=== Building mardown"
        export COLUMNS=$(cat $RESULTS_REPORT_PATH | grep "|" | awk -F"|" '{printf "%s | %s | %s", $2, $3, $4;} {print ""}' | grep -v -e '^[[:space:]]*$' | tail -n +2 | grep '[[:alnum:]]')
        echo -e "$MARDOWN_HEADER \n \n HASH | ERROR | MSG \n --|--|-- \n $COLUMNS" > "$RESULTS_MARKDOWN_REPORT_PATH"
      env:
        - name: MARDOWN_HEADER
          value: "[Conventional Commits](https://www.conventionalcommits.org): **Check Failed** :angry:"
        - name: RESULTS_MARKDOWN_REPORT_PATH
          value: .conv-commits-markdown.report
    - name: cc-publish-check
      image: ghcr.io/vitech-team/sdlc-pipeline-helper:0.0.11
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env bash
        source $(workspaces.source.path)/.jx/variables.sh

        export CHECK_CONCLUSION="success"
        export CHECK_SUMMARY="No issues found"

        if ! "$(cat $(results.passed.path))" ; then
          export CHECK_CONCLUSION="failure"
          export CHECK_SUMMARY="$(cat $RESULTS_MARKDOWN_REPORT_PATH)"
        fi

        sdlcpipelinehelper check-publish \
         --repoOwner="$(params.REPO_OWNER)"  --repoName="$(params.REPO_NAME)" --commit="$HEAD_COMMIT" \
         --detailsUrl="$TEKTON_DAHBOARD_URL" \
         --checkName="Conventional Commits" \
         --checkConclusion="$CHECK_CONCLUSION" \
         --summary="$CHECK_SUMMARY" \
         --title="Status: $CHECK_CONCLUSION"
      env:
        - name: RESULTS_MARKDOWN_REPORT_PATH
          value: .conv-commits-markdown.report
        - name: GH_APP_ID
          valueFrom:
            secretKeyRef:
              name: github-sdlc-app
              key: appId
        - name: GH_APP_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: github-sdlc-app
              key: privateKey
        - name: GH_APP_INSTALLATION_ID
          valueFrom:
            secretKeyRef:
              name: github-sdlc-app
              key: installId
    - name: cc-final
      image: $(params.JX_BOOT)
      workingDir: $(workspaces.source.path)
      script: |-
        if "$(params.CC_FAIL)" ; then
          if ! "$(cat $(results.passed.path))" ; then
            exit 1
          fi
        fi